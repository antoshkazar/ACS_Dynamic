Полученное Задание:

В соответствии с вариантом задания разработать программный продукт с использованием динамической проверки типов во время выполнения программы. Разработку осуществить на языке программирования Python. Стиль написания программы - произвольный.

Реализовать обобщённый массив Различных языков программирования ( 
1)Процедурные (наличие, отсутствие абстрактных типов данных – булевская величина)
2. Объектно-ориентированные (наследование: одинарное, множественное, интерфейса – перечислимый тип)
Полярных координат (угол [радиан] – действительное; координаты конечной точки на плоскости)
3. Функциональные языки (типизация – перечислимый(тип = строгая, динамическая); поддержка «ленивых» вычислений – булевский тип))
Также реализовать функцию нахождения частного от деления года создания на количество символов в названии (действительное число)
Упорядочить элементы массива по возрастанию используя сортировку методом деления пополам (Binary Insertion). 
В качестве ключей для сортировки и других действий используются результаты функции, общей для всех альтернатив.

число модулей реализации :  6 
общий размер исходных текстов: 9.781 Кб, 24Кб на диске
Общий размер файлов .рус : 9.301кб

время выполнения на разных входных данных:
1)5 языков (ввод из файла) - 0.0002075 сек
2)12 языков (ввод из файла) -  0.0005823 сек
3)100 языков (ввод из файла) - 0.002376 сек
4)100 языков (программная генерация) -  0.002521 сек
5)500 языков (программная генерация) - 0.009842 сек
6)5000 языков (программная генерация) -  0.55555 сек
7)10000 языков (программная генерация) - 2.14932сек

Сравнительный анализ:
Динамически типизированная программа более компактна, чем предыдущие, занимает меньше памяти и, в елом, проще в реализации. Также заметна большая разница во времени исполнения этой программы по сравнению с предыдущей. По сравнению с программой ОО, очевидно превосходство динамической типизации на небольших наборов входных данных ( как введенных с клавиатуры, так и сгенерированных системой). Здесь разница практически в несколько раз ( 0.008473  сек у динам.  против 0.0002075 сек у ООП для 5 языков, считанных из файла , 0.0040382 сек против 0.00237 сек для 100 языков, считанных из файла, 0.003282 сек против 0.002521 сек для 100 языков, сгенерированных автоматически).
Если же посмотреть на более крупные входные данные, то динамическая типизация сильно проигрывает ООП-подходу, разница так же может быть в несколько раз (0.55555 сек у динам. против  0.021975 сек у ООП для 5000 языков, сгенерированных автоматически, 2.14932сек против 0.047688 сек на наборе из 10000 языков, сгенерированном системой)
Таким образом, при небольшом объеме входных данных лучше прибегнуть с использованию динамически-типизированной программы, а при работе с большими данными - к ООП.

